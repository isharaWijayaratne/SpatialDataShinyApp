library(shiny); runApp('SMapp.R')
library(shiny); runApp('SMapp.R')
data(sf_sl_3)
sf_sl_3
View(sf_sl_3)
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('SMapp.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
# Server Function
server <- function(input, output, session) {
## Dynamic Map Tab
# Initialize an empty leaflet map
dyn_map <- leaflet() %>%
addPolygons(data = philly_WGS84, fillOpacity = 0.2, smoothFactor = 0.1, weight = 1, color = "red") %>%
addTiles()
# Render the initial map
output$dyn_map <- renderLeaflet({
dyn_map
})
# Observe the "loc" button click and add circle markers
observeEvent(input$loc, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
observeEvent(input$dyn_graph1, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
observeEvent(input$dyn_graph2, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
observeEvent(input$dyn_graph3, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
## Static Map Tab
output$static_map <- renderPlotly({
adjusted_plot <- ggplot() +
geom_sf(data = sf_sl_3, fill = "lightgray")
if (input$stat_graph1) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, aes(color = Rice_Variety, size = Disease_Incidence, alpha = 0.5)) +
scale_color_manual(values = color_vector1) +
scale_size_continuous(range = c(1, 20)) +
labs(size = "Disease_Incidence") +
theme_minimal()
} else if (input$stat_graph2) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, aes(color = Stage_of_Maturity, size = Disease_Incidence, alpha = 0.5)) +
scale_color_manual(values = color_vector2) +
scale_size_continuous(range = c(1, 20)) +
labs(size = "Disease_Incidence") +
theme_minimal()
} else if (input$stat_graph3) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, aes(color = Soil_Type, size = Disease_Incidence, alpha = 0.5)) +
scale_color_manual(values = color_vector3) +
scale_size_continuous(range = c(1, 20)) +
labs(size = "Disease_Incidence") +
theme_minimal()
} else if (input$remove) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, color = "red", size = 1) +
theme_minimal()
}
ggplotly(adjusted_plot)
})
}
shinyApp(ui, server)
## app.R ##
## Libraries
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(sp)
library(tidyverse)
library(dplyr)
library(plotly)
library(readxl)
library(ceylon)
## Data set - Spacial Data
## Associated Data
#data(sf_sl_0)
data(sf_sl_3)
Survey_Sheet <- read_excel("Survey_Sheet.xlsx")
Survey_Sheet <- data.frame(Survey_Sheet)
Survey_Sheet_sf <- st_as_sf(Survey_Sheet, coords = c("Latitude","Longitude"))
st_crs(Survey_Sheet_sf)
st_crs(Survey_Sheet_sf) <- 4326 # we can use EPSG as numeric here
st_crs(Survey_Sheet_sf)
st_write(Survey_Sheet_sf, "client7spatialdata/srilanka", driver = "ESRI Shapefile",append=FALSE)
client7_sf <- st_read("client7spatialdata/srilanka")
str(client7_sf)
client7_sf <- st_transform(client7_sf, crs = st_crs(sf_sl_3))
# Transform the Divisional secretariat boundaries to WGS 84
philly_WGS84 <- st_transform(sf_sl_3, 4326)
# Transform the client7_sf points to WGS 84
client7_sf_wgs84 <- st_transform(client7_sf, 4326)
colnames(client7_sf)[colnames(client7_sf) == "Dss_ncd"] <- "Disease_Incidence"
colnames(client7_sf)[colnames(client7_sf) == "Rc_Vrty"] <- "Rice_Variety"
colnames(client7_sf)[colnames(client7_sf) == "Sol_Typ"] <- "Soil_Type"
colnames(client7_sf)[colnames(client7_sf) == "Stg_f_m"] <- "Stage_of_Maturity"
#Stage of Maturity,Location
color_vector1 <- setNames(rainbow(23), unique(client7_sf$Rice_Variety))
color_vector2 <- setNames(rainbow(23), unique(client7_sf$Stage_of_Maturity))
color_vector3 <- setNames(rainbow(23), unique(client7_sf$Soil_Type))
########################################################################################
# Creating the color palette
#set.seed(34) # Set random seed
#color_palette <- distinctColorPalette(34)
#color_palette
# User Interface
ui <- dashboardPage(skin="green",
dashboardHeader(title="Spatial Mapping" ),
dashboardSidebar(
sidebarMenu(id = "sidebarid",
menuItem("Dynamic Map", tabName = "dynamic_graph",
icon = icon(name = "globe", lib="glyphicon")),
menuItem("Static Map", tabName = "static_graph",
icon = icon(name = "map-marker", lib="glyphicon")),
menuItem("About", tabName = "About",
icon = icon(name = "search", lib="glyphicon"))
)),
dashboardBody(tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Calibri", Times, "Calibri", serif;
font-weight: bold;
font-size: 28px;
}
'))),
tabItems(
# Dynamic Graph tab
tabItem(tabName = "dynamic_graph",
fluidRow(
box(
width = 3,
height = 675,
column(12,
helpText(HTML("<strong> Click to View Locations Visited </strong>")),
actionButton("loc", "Location")),
column(12,
helpText(HTML("<strong>Click to View Incidence by Rice Variety</strong>")),
actionButton("dyn_graph1", "Rice Variety")),
column(12,
helpText(HTML("<strong>Click to View Incidence by Stage of Maturity</strong>")),
actionButton("dyn_graph2", "Stage of Maturity")),
column(12,
helpText(HTML("<strong>Click to View Incidence by Soil Type</strong>")),
actionButton("dyn_graph3", "Soil Type"))
),
# Leaflet map
box(leafletOutput("dyn_map", height = 600), width = 9, height = 675)
)
),
#Static Graph Tab
tabItem(tabName = "static_graph",
fluidRow(
box(
width = 3,
height = 675,
column(12,
helpText(HTML("<strong>Click to View Locations Visited </strong>")),
actionButton("remove", "Location")),
column(12,
helpText(HTML("<strong>Click to View Incidence by Rice Variety</strong>")),
actionButton("stat_graph1", "Rice Variety")),
column(12,
helpText(HTML("<strong>Click to View Incidence by Stage of Maturity</strong>")),
actionButton("stat_graph2", "Stage of Maturity")),
column(12,
helpText(HTML("<strong>Click to View Incidence by Soil Type</strong>")),
actionButton("stat_graph3", "Soil Type"))
),
# 1st visualization
box(plotlyOutput("static_map", height = 600), width = 9, height = 675)
)
),
##About tab
tabItem(tabName = "About",
tags$head(
tags$style(HTML("
code {
display:block;
padding:9.5px;
margin:0 0 15px;
margin-top:10px;
font-size:20px;
line-height:20px;
word-break:break-all;
word-wrap:break-word;
white-space:pre-wrap;
background-color:#F5F5F5;
border:1px solid rgba(0,0,0,0.15);
border-radius:4px;
font-family:monospace;
}"))),
h4(strong("Created by")),
p("- Ishara Wijayaratne"),
p("Under the supervision of",
tags$a(href="https://thiyanga.netlify.app/","Dr. Thiyanga S. Talagala.")),
h4(strong("Dynamic Map")),
p("This graph has been constructed using the Leaflet package"),
h4(strong("Static Map")),
p("This graph has been constructed usig the plotly package"),
)
)))
# Server Function
server <- function(input, output, session) {
## Dynamic Map Tab
# Initialize an empty leaflet map
dyn_map <- leaflet() %>%
addPolygons(data = philly_WGS84, fillOpacity = 0.2, smoothFactor = 0.1, weight = 1, color = "red") %>%
addTiles()
# Render the initial map
output$dyn_map <- renderLeaflet({
dyn_map
})
# Observe the "loc" button click and add circle markers
observeEvent(input$loc, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
observeEvent(input$dyn_graph1, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
observeEvent(input$dyn_graph2, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
observeEvent(input$dyn_graph3, {
leafletProxy("dyn_map") %>%
clearMarkers() %>%
addCircleMarkers(data = client7_sf_wgs84, color = "blue", radius = 1, fillOpacity = 0.7)
})
## Static Map Tab
output$static_map <- renderPlotly({
adjusted_plot <- ggplot() +
geom_sf(data = sf_sl_3, fill = "lightgray")
if (input$stat_graph1) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, aes(color = Rice_Variety, size = Disease_Incidence, alpha = 0.5)) +
scale_color_manual(values = color_vector1) +
scale_size_continuous(range = c(1, 20)) +
labs(size = "Disease_Incidence") +
theme_minimal()
} else if (input$stat_graph2) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, aes(color = Stage_of_Maturity, size = Disease_Incidence, alpha = 0.5)) +
scale_color_manual(values = color_vector2) +
scale_size_continuous(range = c(1, 20)) +
labs(size = "Disease_Incidence") +
theme_minimal()
} else if (input$stat_graph3) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, aes(color = Soil_Type, size = Disease_Incidence, alpha = 0.5)) +
scale_color_manual(values = color_vector3) +
scale_size_continuous(range = c(1, 20)) +
labs(size = "Disease_Incidence") +
theme_minimal()
} else if (input$remove) {
adjusted_plot <- adjusted_plot +
geom_sf(data = client7_sf, color = "red", size = 1) +
theme_minimal()
}
ggplotly(adjusted_plot)
})
}
shinyApp(ui, server)
runApp('delete.R')
runApp('delete.R')
m=leaflet(data = basins) %>% addTiles() %>% addCircleMarkers(~lon, ~lat , popup = ~as.character(basin),radius=~res.density*0.4,label=~htmlEscape(basin),labelOptions=labelOptions(noHide=T,textOnly=TRUE,direction="bottom"))
Survey_Sheet <- read_excel("Survey_Sheet.xlsx")
Survey_Sheet
st_crs(Survey_Sheet_sf)
st_crs(Survey_Sheet_sf) <- 4326 # we can use EPSG as numeric here
st_crs(Survey_Sheet_sf)
data(sf_sl_3)
sf_sl_3
data(sf_sl_3) #From Ceylon package
Survey_Sheet <- read_excel("Survey_Sheet.xlsx")
Survey_Sheet <- data.frame(Survey_Sheet)
Survey_Sheet_sf <- st_as_sf(Survey_Sheet, coords = c("Latitude","Longitude"))
st_crs(Survey_Sheet_sf) <- 4326 # we can use EPSG as numeric here
st_write(Survey_Sheet_sf, "client7spatialdata/srilanka", driver = "ESRI Shapefile",append=FALSE)
client7_sf <- st_read("client7spatialdata/srilanka")
str(client7_sf)
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
# app.R ##
## Libraries
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(sp)
library(tidyverse)
library(dplyr)
library(plotly)
library(readxl)
library(ceylon)
## Data set - Spacial Data
## Associated Data
data(sf_sl_3) #From Ceylon package
Survey_Sheet <- read_excel("Survey_Sheet.xlsx")
Survey_Sheet <- data.frame(Survey_Sheet)
Survey_Sheet_sf <- st_as_sf(Survey_Sheet, coords = c("Latitude","Longitude"))
st_crs(Survey_Sheet_sf) <- 4326 # we can use EPSG as numeric here
#Create a folder named "client7spatialdata" and within it another folder named "srilanka"
st_write(Survey_Sheet_sf, "client7spatialdata/srilanka", driver = "ESRI Shapefile",append=FALSE)
client7_sf <- st_read("client7spatialdata/srilanka")
#str(client7_sf)
client7_sf <- st_transform(client7_sf, crs = st_crs(sf_sl_3))
# Transform the Divisional secretariat boundaries to WGS 84
philly_WGS84 <- st_transform(sf_sl_3, 4326)
# Transform the client7_sf points to WGS 84
client7_sf_wgs84 <- st_transform(client7_sf, 4326)
#Changing Column names of the dataset
colnames(client7_sf)[colnames(client7_sf) == "Dss_ncd"] <- "Disease_Incidence"
colnames(client7_sf)[colnames(client7_sf) == "Rc_Vrty"] <- "Rice_Variety"
colnames(client7_sf)[colnames(client7_sf) == "Sol_Typ"] <- "Soil_Type"
colnames(client7_sf)[colnames(client7_sf) == "Stg_f_m"] <- "Stage_of_Maturity"
#Colour Pallette
color_vector1 <- setNames(rainbow(9), unique(client7_sf$Rice_Variety))
color_vector2 <- setNames(rainbow(23), unique(client7_sf$Stage_of_Maturity))
color_vector3 <- setNames(rainbow(23), unique(client7_sf$Soil_Type))
names(client7_sf_wgs84)
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
color_vector1
runApp('delete.R')
color_vector1
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
library(shiny); runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
library(shiny); runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
runApp('maps_leaflet.R')
library(shiny); runApp('maps_leaflet.R')
library(shiny); runApp('maps_leaflet.R')
